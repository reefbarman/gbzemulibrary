using System;
using System.Collections.Generic;
using InsCBSet = GBZEmuLibrary.CBInstructionSet;
using InsSchema = GBZEmuLibrary.InstructionSchema;
using InsSet = GBZEmuLibrary.InstructionSet;

namespace GBZEmuLibrary
{
    internal partial class CPU
    {
        private void InitInstructions()
        {
            _instructions = new Dictionary<byte, Action>
            {
                { InsSet.NOP,      () => { } },
                { InsSet.LDBCnn,   () => LoadImmediate(out _registers.BC) },
                { InsSet.LDBCA,    () => StoreRegister(_registers.A, _registers.BC) },
                { InsSet.INCBC,    () => { IncrementClock(); _registers.BC++; } },
                { InsSet.INCB,     () => Increment(ref _registers.B) },
                { InsSet.DECB,     () => Decrement(ref _registers.B) },
                { InsSet.LDBn,     () => LoadImmediate(out _registers.B) },
                { InsSet.RLCA,     () => RotateLeftNoCarry(ref _registers.A, true) },
                { InsSet.LDnnSP,   StoreSPToImmediateAddress },
                { InsSet.ADDHLBC,  () => Add(_registers.BC) },
                { InsSet.LDABC,    () => LoadFromAddress(out _registers.A, _registers.BC) },
                { InsSet.DECBC,    () => { IncrementClock(); _registers.BC--; } },
                { InsSet.INCC,     () => Increment(ref _registers.C) },
                { InsSet.DECC,     () => Decrement(ref _registers.C) },
                { InsSet.LDCn,     () => LoadImmediate(out _registers.C) },
                { InsSet.RRCA,     () => RotateRightNoCarry(ref _registers.A, true) },
                { InsSet.STOP,     Stop },
                { InsSet.LDDEnn,   () => LoadImmediate(out _registers.DE) },
                { InsSet.LDDEA,    () => StoreRegister(_registers.A, _registers.DE) },
                { InsSet.INCDE,    () => { IncrementClock(); _registers.DE++; } },
                { InsSet.INCD,     () => Increment(ref _registers.D) },
                { InsSet.DECD,     () => Decrement(ref _registers.D) },
                { InsSet.LDDn,     () => LoadImmediate(out _registers.D) },
                { InsSet.RLA,      () => RotateLeft(ref _registers.A, true) },
                { InsSet.JRn,      JumpImmediate },
                { InsSet.ADDHLDE,  () => Add(_registers.DE) },
                { InsSet.LDADE,    () => LoadFromAddress(out _registers.A, _registers.DE) },
                { InsSet.DECDE,    () => { IncrementClock(); _registers.DE--; } },
                { InsSet.INCE,     () => Increment(ref _registers.E) },
                { InsSet.DECE,     () => Decrement(ref _registers.E) },
                { InsSet.LDEn,     () => LoadImmediate(out _registers.E) },
                { InsSet.RRA,      () => RotateRight(ref _registers.A, true) },
                { InsSet.JRNZn,    () => JumpTestRelative(InsSchema.FLAG_Z, false) },
                { InsSet.LDHLnn,   () => LoadImmediate(out _registers.HL) },
                { InsSet.LDHLIA,   () => StoreRegister(_registers.A, _registers.HL++) },
                { InsSet.INCHL,    () => { IncrementClock(); _registers.HL++; } },
                { InsSet.INCH,     () => Increment(ref _registers.H) },
                { InsSet.DECH,     () => Decrement(ref _registers.H) },
                { InsSet.LDHn,     () => LoadImmediate(out _registers.H) },
                { InsSet.DAA,      DAA },
                { InsSet.JRZn,     () => JumpTestRelative(InsSchema.FLAG_Z, true) },
                { InsSet.ADDHLHL,  () => Add(_registers.HL) },
                { InsSet.LDAHLI,   () => LoadFromAddress(out _registers.A, _registers.HL++) },
                { InsSet.DECHL,    () => { IncrementClock(); _registers.HL--; } },
                { InsSet.INCL,     () => Increment(ref _registers.L) },
                { InsSet.DECL,     () => Decrement(ref _registers.L) },
                { InsSet.LDLn,     () => LoadImmediate(out _registers.L) },
                { InsSet.CPL,      Compliment },
                { InsSet.JRNCn,    () => JumpTestRelative(InsSchema.FLAG_C, false) },
                { InsSet.LDSPnn,   () => LoadImmediate(out _sp.SP) },
                { InsSet.LDHLDA,   () => StoreRegister(_registers.A, _registers.HL--) },
                { InsSet.INCSP,    () => { IncrementClock(); _sp.SP++; } },
                { InsSet.INCHLa,   () => IncrementMemory(_registers.HL) },
                { InsSet.DECHLa,   () => DecrementMemory(_registers.HL) },
                { InsSet.LDHLn,    () => StoreRegister(ReadByte(_pc++), _registers.HL) },
                { InsSet.SCF,      () => { SetFlag(InsSchema.FLAG_C); SetFlag(InsSchema.FLAG_H, false); SetFlag(InsSchema.FLAG_N, false); } },
                { InsSet.JRCn,     () => JumpTestRelative(InsSchema.FLAG_C, true) },
                { InsSet.ADDHLSP,  () => Add(_sp.SP) },
                { InsSet.LDAHLD,   () => LoadFromAddress(out _registers.A, _registers.HL--) },
                { InsSet.DECSP,    () => { IncrementClock(); _sp.SP--; } },
                { InsSet.INCA,     () => Increment(ref _registers.A) },
                { InsSet.DECA,     () => Decrement(ref _registers.A) },
                { InsSet.LDAn,     () => LoadImmediate(out _registers.A) },
                { InsSet.CCF,      () => { SetFlag(InsSchema.FLAG_C, !TestFlag(InsSchema.FLAG_C)); SetFlag(InsSchema.FLAG_H, false); SetFlag(InsSchema.FLAG_N, false); } },
                { InsSet.LDBB,     () => Load(ref _registers.B, _registers.B) },
                { InsSet.LDBC,     () => Load(ref _registers.B, _registers.C) },
                { InsSet.LDBD,     () => Load(ref _registers.B, _registers.D) },
                { InsSet.LDBE,     () => Load(ref _registers.B, _registers.E) },
                { InsSet.LDBH,     () => Load(ref _registers.B, _registers.H) },
                { InsSet.LDBL,     () => Load(ref _registers.B, _registers.L) },
                { InsSet.LDBHL,    () => LoadFromAddress(out _registers.B, _registers.HL) },
                { InsSet.LDBA,     () => Load(ref _registers.B, _registers.A) },
                { InsSet.LDCB,     () => Load(ref _registers.C, _registers.B) },
                { InsSet.LDCC,     () => Load(ref _registers.C, _registers.C) },
                { InsSet.LDCD,     () => Load(ref _registers.C, _registers.D) },
                { InsSet.LDCE,     () => Load(ref _registers.C, _registers.E) },
                { InsSet.LDCH,     () => Load(ref _registers.C, _registers.H) },
                { InsSet.LDCL,     () => Load(ref _registers.C, _registers.L) },
                { InsSet.LDCHL,    () => LoadFromAddress(out _registers.C, _registers.HL) },
                { InsSet.LDrCA,    () => Load(ref _registers.C, _registers.A) },
                { InsSet.LDDB,     () => Load(ref _registers.D, _registers.B) },
                { InsSet.LDDC,     () => Load(ref _registers.D, _registers.C) },
                { InsSet.LDDD,     () => Load(ref _registers.D, _registers.D) },
                { InsSet.LDDE,     () => Load(ref _registers.D, _registers.E) },
                { InsSet.LDDH,     () => Load(ref _registers.D, _registers.H) },
                { InsSet.LDDL,     () => Load(ref _registers.D, _registers.L) },
                { InsSet.LDDHL,    () => LoadFromAddress(out _registers.D, _registers.HL) },
                { InsSet.LDDA,     () => Load(ref _registers.D, _registers.A) },
                { InsSet.LDEB,     () => Load(ref _registers.E, _registers.B) },
                { InsSet.LDEC,     () => Load(ref _registers.E, _registers.C) },
                { InsSet.LDED,     () => Load(ref _registers.E, _registers.D) },
                { InsSet.LDEE,     () => Load(ref _registers.E, _registers.E) },
                { InsSet.LDEH,     () => Load(ref _registers.E, _registers.H) },
                { InsSet.LDEL,     () => Load(ref _registers.E, _registers.L) },
                { InsSet.LDEHL,    () => LoadFromAddress(out _registers.E, _registers.HL) },
                { InsSet.LDEA,     () => Load(ref _registers.E, _registers.A) },
                { InsSet.LDHB,     () => Load(ref _registers.H, _registers.B) },
                { InsSet.LDHC,     () => Load(ref _registers.H, _registers.C) },
                { InsSet.LDHD,     () => Load(ref _registers.H, _registers.D) },
                { InsSet.LDHE,     () => Load(ref _registers.H, _registers.E) },
                { InsSet.LDHH,     () => Load(ref _registers.H, _registers.H) },
                { InsSet.LDHL,     () => Load(ref _registers.H, _registers.L) },
                { InsSet.LDHHL,    () => LoadFromAddress(out _registers.H, _registers.HL) },
                { InsSet.LDHA,     () => Load(ref _registers.H, _registers.A) },
                { InsSet.LDLB,     () => Load(ref _registers.L, _registers.B) },
                { InsSet.LDLC,     () => Load(ref _registers.L, _registers.C) },
                { InsSet.LDLD,     () => Load(ref _registers.L, _registers.D) },
                { InsSet.LDLE,     () => Load(ref _registers.L, _registers.E) },
                { InsSet.LDLH,     () => Load(ref _registers.L, _registers.H) },
                { InsSet.LDLL,     () => Load(ref _registers.L, _registers.L) },
                { InsSet.LDLHL,    () => LoadFromAddress(out _registers.L, _registers.HL) },
                { InsSet.LDLA,     () => Load(ref _registers.L, _registers.A) },
                { InsSet.LDHLB,    () => StoreRegister(_registers.B, _registers.HL) },
                { InsSet.LDHLC,    () => StoreRegister(_registers.C, _registers.HL) },
                { InsSet.LDHLD,    () => StoreRegister(_registers.D, _registers.HL) },
                { InsSet.LDHLE,    () => StoreRegister(_registers.E, _registers.HL) },
                { InsSet.LDHLH,    () => StoreRegister(_registers.H, _registers.HL) },
                { InsSet.LDHLL,    () => StoreRegister(_registers.L, _registers.HL) },
                { InsSet.HALT,     Halt },
                { InsSet.LDHLA,    () => StoreRegister(_registers.A, _registers.HL) },
                { InsSet.LDAB,     () => Load(ref _registers.A, _registers.B) },
                { InsSet.LDrAC,    () => Load(ref _registers.A, _registers.C) },
                { InsSet.LDAD,     () => Load(ref _registers.A, _registers.D) },
                { InsSet.LDAE,     () => Load(ref _registers.A, _registers.E) },
                { InsSet.LDAH,     () => Load(ref _registers.A, _registers.H) },
                { InsSet.LDAL,     () => Load(ref _registers.A, _registers.L) },
                { InsSet.LDAHL,    () => LoadFromAddress(out _registers.A, _registers.HL) },
                { InsSet.LDAA,     () => Load(ref _registers.A, _registers.A) },
                { InsSet.ADDB,     () => Add(_registers.B) },
                { InsSet.ADDC,     () => Add(_registers.C) },
                { InsSet.ADDD,     () => Add(_registers.D) },
                { InsSet.ADDE,     () => Add(_registers.E) },
                { InsSet.ADDH,     () => Add(_registers.H) },
                { InsSet.ADDL,     () => Add(_registers.L) },
                { InsSet.ADDHL,    () => Add(ReadByte(_registers.HL)) },
                { InsSet.ADDA,     () => Add(_registers.A) },
                { InsSet.ADCB,     () => AddCarry(_registers.B) },
                { InsSet.ADCC,     () => AddCarry(_registers.C) },
                { InsSet.ADCD,     () => AddCarry(_registers.D) },
                { InsSet.ADCE,     () => AddCarry(_registers.E) },
                { InsSet.ADCH,     () => AddCarry(_registers.H) },
                { InsSet.ADCL,     () => AddCarry(_registers.L) },
                { InsSet.ADCHL,    () => AddCarry(ReadByte(_registers.HL)) },
                { InsSet.ADCA,     () => AddCarry(_registers.A) },
                { InsSet.SUBB,     () => Subtract(_registers.B) },
                { InsSet.SUBC,     () => Subtract(_registers.C) },
                { InsSet.SUBD,     () => Subtract(_registers.D) },
                { InsSet.SUBE,     () => Subtract(_registers.E) },
                { InsSet.SUBH,     () => Subtract(_registers.H) },
                { InsSet.SUBL,     () => Subtract(_registers.L) },
                { InsSet.SUBHL,    () => Subtract(ReadByte(_registers.HL)) },
                { InsSet.SUBA,     () => Subtract(_registers.A) },
                { InsSet.SBCAB,    () => Subtract(_registers.B, true) },
                { InsSet.SBCAC,    () => Subtract(_registers.C, true) },
                { InsSet.SBCAD,    () => Subtract(_registers.D, true) },
                { InsSet.SBCAE,    () => Subtract(_registers.E, true) },
                { InsSet.SBCAH,    () => Subtract(_registers.H, true) },
                { InsSet.SBCAL,    () => Subtract(_registers.L, true) },
                { InsSet.SBCAHL,   () => Subtract(ReadByte(_registers.HL), true) },
                { InsSet.SBCAA,    () => Subtract(_registers.A, true) },
                { InsSet.ANDB,     () => AND(_registers.B) },
                { InsSet.ANDC,     () => AND(_registers.C) },
                { InsSet.ANDD,     () => AND(_registers.D) },
                { InsSet.ANDE,     () => AND(_registers.E) },
                { InsSet.ANDH,     () => AND(_registers.H) },
                { InsSet.ANDL,     () => AND(_registers.L) },
                { InsSet.ANDHL,    () => AND(ReadByte(_registers.HL)) },
                { InsSet.ANDA,     () => AND(_registers.A) },
                { InsSet.XORB,     () => XOR(_registers.B) },
                { InsSet.XORC,     () => XOR(_registers.C) },
                { InsSet.XORD,     () => XOR(_registers.D) },
                { InsSet.XORE,     () => XOR(_registers.E) },
                { InsSet.XORH,     () => XOR(_registers.H) },
                { InsSet.XORL,     () => XOR(_registers.L) },
                { InsSet.XORHL,    () => XOR(ReadByte(_registers.HL)) },
                { InsSet.XORA,     () => XOR(_registers.A) },
                { InsSet.ORB,      () => OR(_registers.B) },
                { InsSet.ORC,      () => OR(_registers.C) },
                { InsSet.ORD,      () => OR(_registers.D) },
                { InsSet.ORE,      () => OR(_registers.E) },
                { InsSet.ORH,      () => OR(_registers.H) },
                { InsSet.ORL,      () => OR(_registers.L) },
                { InsSet.ORHL,     () => OR(ReadByte(_registers.HL)) },
                { InsSet.ORA,      () => OR(_registers.A) },
                { InsSet.CPB,      () => Compare(_registers.B) },
                { InsSet.CPC,      () => Compare(_registers.C) },
                { InsSet.CPD,      () => Compare(_registers.D) },
                { InsSet.CPE,      () => Compare(_registers.E) },
                { InsSet.CPH,      () => Compare(_registers.H) },
                { InsSet.CPrL,     () => Compare(_registers.L) },
                { InsSet.CPHL,     () => Compare(ReadByte(_registers.HL)) },
                { InsSet.CPA,      () => Compare(_registers.A) },
                { InsSet.RETNZ,    () => ReturnTest(InsSchema.FLAG_Z, false) },
                { InsSet.POPBC,    () => Pop(out _registers.BC) },
                { InsSet.JPNZnn,   () => JumpTestImmediate16Bit(InsSchema.FLAG_Z, false) },
                { InsSet.JPnn,     JumpImmediate16Bit },
                { InsSet.CALLNZnn, () => CallTest(InsSchema.FLAG_Z, false) },
                { InsSet.PUSHBC,   () => Push(_registers.BC) },
                { InsSet.ADDn,     () => Add(ReadByte(_pc++)) },
                { InsSet.RST00H,   () => Restart(0) },
                { InsSet.RETZ,     () => ReturnTest(InsSchema.FLAG_Z, true) },
                { InsSet.RET,      Return },
                { InsSet.JPZnn,    () => JumpTestImmediate16Bit(InsSchema.FLAG_Z, true) },
                { InsSet.PrefixCB, ProcessExtended },
                { InsSet.CALLZnn,  () => CallTest(InsSchema.FLAG_Z, true) },
                { InsSet.CALLnn,   Call },
                { InsSet.ADCn,     () => AddCarry(ReadByte(_pc++)) },
                { InsSet.RST08H,   () => Restart(0x08) },
                { InsSet.RETNC,    () => ReturnTest(InsSchema.FLAG_C, false) },
                { InsSet.POPDE,    () => Pop(out _registers.DE) },
                { InsSet.JPNCnn,   () => JumpTestImmediate16Bit(InsSchema.FLAG_C, false) },
                { InsSet.CALLNCnn, () => CallTest(InsSchema.FLAG_C, false) },
                { InsSet.PUSHDE,   () => Push(_registers.DE) },
                { InsSet.SUBn,     () => Subtract(ReadByte(_pc++)) },
                { InsSet.RST10H,   () => Restart(0x10) },
                { InsSet.RETC,     () => ReturnTest(InsSchema.FLAG_C, true) },
                { InsSet.RETI,     () => { _pendingInterruptEnabled = 1; Return(); } },
                { InsSet.JPCnn,    () => JumpTestImmediate16Bit(InsSchema.FLAG_C, true) },
                { InsSet.CALLCnn,  () => CallTest(InsSchema.FLAG_C, true) },
                { InsSet.SBCAn,    () => Subtract(ReadByte(_pc++), true) },
                { InsSet.RST18H,   () => Restart(0x18) },
                { InsSet.LDHnA,    () => StoreRegisterToImmediateAddress(_registers.A) },
                { InsSet.POPHL,    () => Pop(out _registers.HL) },
                { InsSet.LDCA,     () => StoreRegister(_registers.A, 0xFF00 | _registers.C) },
                { InsSet.PUSHHL,   () => Push(_registers.HL) },
                { InsSet.ANDn,     () => AND(ReadByte(_pc++)) },
                { InsSet.RST20H,   () => Restart(0x20) },
                { InsSet.ADDSPn,   AddImmediateToSP },
                { InsSet.JPHL,     () => { _pc = _registers.HL; } },
                { InsSet.LDnnA,    () => StoreRegisterToImmediateAddress16Bit(_registers.A) },
                { InsSet.XORn,     () => XOR(ReadByte(_pc++)) },
                { InsSet.RST28H,   () => Restart(0x28) },
                { InsSet.LDHAn,    () => LoadFromImmediateAddress(out _registers.A) },
                { InsSet.POPAF,    () => { Pop(out _registers.AF); _registers.F &= 0xF0; } }, //TODO need to figure out why we have to clear the flags
                { InsSet.LDAC,     () => LoadFromAddress(out _registers.A, 0xFF00 | _registers.C) },
                { InsSet.DI,       () => { _pendingInterruptDisabled = 1; _interruptHandler.InterruptsEnabled = true; } },
                { InsSet.PUSHAF,   () => Push(_registers.AF) },
                { InsSet.ORn,      () => OR(ReadByte(_pc++)) },
                { InsSet.RST30H,   () => Restart(0x30) },
                { InsSet.LDHLSPn,  LoadHLSPSpecial },
                { InsSet.LDSPHL,   () => Load(ref _sp.SP, _registers.HL) },
                { InsSet.LDAnn,    () => LoadFromImmediate16BitAddress(out _registers.A) },
                { InsSet.EI,       () => { _pendingInterruptEnabled = 1; } },
                { InsSet.CPn,      () => Compare(ReadByte(_pc++)) },
                { InsSet.RST38H,   () => Restart(0x38) }
            };

            _instructionsCB = new Dictionary<byte, Action>
            {
                { InsCBSet.RLCB,   () => RotateLeftNoCarry(ref _registers.B) },
                { InsCBSet.RLCC,   () => RotateLeftNoCarry(ref _registers.C) },
                { InsCBSet.RLCD,   () => RotateLeftNoCarry(ref _registers.D) },
                { InsCBSet.RLCE,   () => RotateLeftNoCarry(ref _registers.E) },
                { InsCBSet.RLCH,   () => RotateLeftNoCarry(ref _registers.H) },
                { InsCBSet.RLCL,   () => RotateLeftNoCarry(ref _registers.L) },
                { InsCBSet.RLCHL,  () => RotateLeftNoCarry(_registers.HL) },
                { InsCBSet.RLCA,   () => RotateLeftNoCarry(ref _registers.A) },
                { InsCBSet.RRCB,   () => RotateRightNoCarry(ref _registers.B) },
                { InsCBSet.RRCC,   () => RotateRightNoCarry(ref _registers.C) },
                { InsCBSet.RRCD,   () => RotateRightNoCarry(ref _registers.D) },
                { InsCBSet.RRCE,   () => RotateRightNoCarry(ref _registers.E) },
                { InsCBSet.RRCH,   () => RotateRightNoCarry(ref _registers.H) },
                { InsCBSet.RRCL,   () => RotateRightNoCarry(ref _registers.L) },
                { InsCBSet.RRCHL,  () => RotateRightNoCarry(_registers.HL) },
                { InsCBSet.RRCA,   () => RotateRightNoCarry(ref _registers.A) },
                { InsCBSet.RLB,    () => RotateLeft(ref _registers.B) },
                { InsCBSet.RLC,    () => RotateLeft(ref _registers.C) },
                { InsCBSet.RLD,    () => RotateLeft(ref _registers.D) },
                { InsCBSet.RLE,    () => RotateLeft(ref _registers.E) },
                { InsCBSet.RLH,    () => RotateLeft(ref _registers.H) },
                { InsCBSet.RLL,    () => RotateLeft(ref _registers.L) },
                { InsCBSet.RLHL,   () => RotateLeft(_registers.HL) },
                { InsCBSet.RLA,    () => RotateLeft(ref _registers.A) },
                { InsCBSet.RRB,    () => RotateRight(ref _registers.B) },
                { InsCBSet.RRC,    () => RotateRight(ref _registers.C) },
                { InsCBSet.RRD,    () => RotateRight(ref _registers.D) },
                { InsCBSet.RRE,    () => RotateRight(ref _registers.E) },
                { InsCBSet.RRH,    () => RotateRight(ref _registers.H) },
                { InsCBSet.RRL,    () => RotateRight(ref _registers.L) },
                { InsCBSet.RRHL,   () => RotateRight(_registers.HL) },
                { InsCBSet.RRA,    () => RotateRight(ref _registers.A) },
                { InsCBSet.SLAB,   () => LogicalShiftLeft(ref _registers.B) },
                { InsCBSet.SLAC,   () => LogicalShiftLeft(ref _registers.C) },
                { InsCBSet.SLAD,   () => LogicalShiftLeft(ref _registers.D) },
                { InsCBSet.SLAE,   () => LogicalShiftLeft(ref _registers.E) },
                { InsCBSet.SLAH,   () => LogicalShiftLeft(ref _registers.H) },
                { InsCBSet.SLAL,   () => LogicalShiftLeft(ref _registers.L) },
                { InsCBSet.SLAHL,  () => LogicalShiftLeft(_registers.HL) },
                { InsCBSet.SLAA,   () => LogicalShiftLeft(ref _registers.A) },
                { InsCBSet.SRAB,   () => ArithmeticShiftRight(ref _registers.B) },
                { InsCBSet.SRAC,   () => ArithmeticShiftRight(ref _registers.C) },
                { InsCBSet.SRAD,   () => ArithmeticShiftRight(ref _registers.D) },
                { InsCBSet.SRAE,   () => ArithmeticShiftRight(ref _registers.E) },
                { InsCBSet.SRAH,   () => ArithmeticShiftRight(ref _registers.H) },
                { InsCBSet.SRAL,   () => ArithmeticShiftRight(ref _registers.L) },
                { InsCBSet.SRAHL,  () => ArithmeticShiftRight(_registers.HL) },
                { InsCBSet.SRAA,   () => ArithmeticShiftRight(ref _registers.A) },
                { InsCBSet.SWAPB,  () => Swap(ref _registers.B) },
                { InsCBSet.SWAPC,  () => Swap(ref _registers.C) },
                { InsCBSet.SWAPD,  () => Swap(ref _registers.D) },
                { InsCBSet.SWAPE,  () => Swap(ref _registers.E) },
                { InsCBSet.SWAPH,  () => Swap(ref _registers.H) },
                { InsCBSet.SWAPL,  () => Swap(ref _registers.L) },
                { InsCBSet.SWAPHL, () => Swap(_registers.HL) },
                { InsCBSet.SWAPA,  () => Swap(ref _registers.A) },
                { InsCBSet.SRLB,   () => LogicalShiftRight(ref _registers.B) },
                { InsCBSet.SRLC,   () => LogicalShiftRight(ref _registers.C) },
                { InsCBSet.SRLD,   () => LogicalShiftRight(ref _registers.D) },
                { InsCBSet.SRLE,   () => LogicalShiftRight(ref _registers.E) },
                { InsCBSet.SRLH,   () => LogicalShiftRight(ref _registers.H) },
                { InsCBSet.SRLL,   () => LogicalShiftRight(ref _registers.L) },
                { InsCBSet.SRLHL,  () => LogicalShiftRight(_registers.HL) },
                { InsCBSet.SRLA,   () => LogicalShiftRight(ref _registers.A) },
                { InsCBSet.BIT0B,  () => BitTest(0, _registers.B) },
                { InsCBSet.BIT0C,  () => BitTest(0, _registers.C) },
                { InsCBSet.BIT0D,  () => BitTest(0, _registers.D) },
                { InsCBSet.BIT0E,  () => BitTest(0, _registers.E) },
                { InsCBSet.BIT0H,  () => BitTest(0, _registers.H) },
                { InsCBSet.BIT0L,  () => BitTest(0, _registers.L) },
                { InsCBSet.BIT0HL, () => BitTest(0, _registers.HL) },
                { InsCBSet.BIT0A,  () => BitTest(0, _registers.A) },
                { InsCBSet.BIT1B,  () => BitTest(1, _registers.B) },
                { InsCBSet.BIT1C,  () => BitTest(1, _registers.C) },
                { InsCBSet.BIT1D,  () => BitTest(1, _registers.D) },
                { InsCBSet.BIT1E,  () => BitTest(1, _registers.E) },
                { InsCBSet.BIT1H,  () => BitTest(1, _registers.H) },
                { InsCBSet.BIT1L,  () => BitTest(1, _registers.L) },
                { InsCBSet.BIT1HL, () => BitTest(1, _registers.HL) },
                { InsCBSet.BIT1A,  () => BitTest(1, _registers.A) },
                { InsCBSet.BIT2B,  () => BitTest(2, _registers.B) },
                { InsCBSet.BIT2C,  () => BitTest(2, _registers.C) },
                { InsCBSet.BIT2D,  () => BitTest(2, _registers.D) },
                { InsCBSet.BIT2E,  () => BitTest(2, _registers.E) },
                { InsCBSet.BIT2H,  () => BitTest(2, _registers.H) },
                { InsCBSet.BIT2L,  () => BitTest(2, _registers.L) },
                { InsCBSet.BIT2HL, () => BitTest(2, _registers.HL) },
                { InsCBSet.BIT2A,  () => BitTest(2, _registers.A) },
                { InsCBSet.BIT3B,  () => BitTest(3, _registers.B) },
                { InsCBSet.BIT3C,  () => BitTest(3, _registers.C) },
                { InsCBSet.BIT3D,  () => BitTest(3, _registers.D) },
                { InsCBSet.BIT3E,  () => BitTest(3, _registers.E) },
                { InsCBSet.BIT3H,  () => BitTest(3, _registers.H) },
                { InsCBSet.BIT3L,  () => BitTest(3, _registers.L) },
                { InsCBSet.BIT3HL, () => BitTest(3, _registers.HL) },
                { InsCBSet.BIT3A,  () => BitTest(3, _registers.A) },
                { InsCBSet.BIT4B,  () => BitTest(4, _registers.B) },
                { InsCBSet.BIT4C,  () => BitTest(4, _registers.C) },
                { InsCBSet.BIT4D,  () => BitTest(4, _registers.D) },
                { InsCBSet.BIT4E,  () => BitTest(4, _registers.E) },
                { InsCBSet.BIT4H,  () => BitTest(4, _registers.H) },
                { InsCBSet.BIT4L,  () => BitTest(4, _registers.L) },
                { InsCBSet.BIT4HL, () => BitTest(4, _registers.HL) },
                { InsCBSet.BIT4A,  () => BitTest(4, _registers.A) },
                { InsCBSet.BIT5B,  () => BitTest(5, _registers.B) },
                { InsCBSet.BIT5C,  () => BitTest(5, _registers.C) },
                { InsCBSet.BIT5D,  () => BitTest(5, _registers.D) },
                { InsCBSet.BIT5E,  () => BitTest(5, _registers.E) },
                { InsCBSet.BIT5H,  () => BitTest(5, _registers.H) },
                { InsCBSet.BIT5L,  () => BitTest(5, _registers.L) },
                { InsCBSet.BIT5HL, () => BitTest(5, _registers.HL) },
                { InsCBSet.BIT5A,  () => BitTest(5, _registers.A) },
                { InsCBSet.BIT6B,  () => BitTest(6, _registers.B) },
                { InsCBSet.BIT6C,  () => BitTest(6, _registers.C) },
                { InsCBSet.BIT6D,  () => BitTest(6, _registers.D) },
                { InsCBSet.BIT6E,  () => BitTest(6, _registers.E) },
                { InsCBSet.BIT6H,  () => BitTest(6, _registers.H) },
                { InsCBSet.BIT6L,  () => BitTest(6, _registers.L) },
                { InsCBSet.BIT6HL, () => BitTest(6, _registers.HL) },
                { InsCBSet.BIT6A,  () => BitTest(6, _registers.A) },
                { InsCBSet.BIT7B,  () => BitTest(7, _registers.B) },
                { InsCBSet.BIT7C,  () => BitTest(7, _registers.C) },
                { InsCBSet.BIT7D,  () => BitTest(7, _registers.D) },
                { InsCBSet.BIT7E,  () => BitTest(7, _registers.E) },
                { InsCBSet.BIT7H,  () => BitTest(7, _registers.H) },
                { InsCBSet.BIT7L,  () => BitTest(7, _registers.L) },
                { InsCBSet.BIT7HL, () => BitTest(7, _registers.HL) },
                { InsCBSet.BIT7A,  () => BitTest(7, _registers.A) },
                { InsCBSet.RES0B,  () => ClearBit(0, ref _registers.B) },
                { InsCBSet.RES0C,  () => ClearBit(0, ref _registers.C) },
                { InsCBSet.RES0D,  () => ClearBit(0, ref _registers.D) },
                { InsCBSet.RES0E,  () => ClearBit(0, ref _registers.E) },
                { InsCBSet.RES0H,  () => ClearBit(0, ref _registers.H) },
                { InsCBSet.RES0L,  () => ClearBit(0, ref _registers.L) },
                { InsCBSet.RES0HL, () => ClearBit(0, _registers.HL) },
                { InsCBSet.RES0A,  () => ClearBit(0, ref _registers.A) },
                { InsCBSet.RES1B,  () => ClearBit(1, ref _registers.B) },
                { InsCBSet.RES1C,  () => ClearBit(1, ref _registers.C) },
                { InsCBSet.RES1D,  () => ClearBit(1, ref _registers.D) },
                { InsCBSet.RES1E,  () => ClearBit(1, ref _registers.E) },
                { InsCBSet.RES1H,  () => ClearBit(1, ref _registers.H) },
                { InsCBSet.RES1L,  () => ClearBit(1, ref _registers.L) },
                { InsCBSet.RES1HL, () => ClearBit(1, _registers.HL) },
                { InsCBSet.RES1A,  () => ClearBit(1, ref _registers.A) },
                { InsCBSet.RES2B,  () => ClearBit(2, ref _registers.B) },
                { InsCBSet.RES2C,  () => ClearBit(2, ref _registers.C) },
                { InsCBSet.RES2D,  () => ClearBit(2, ref _registers.D) },
                { InsCBSet.RES2E,  () => ClearBit(2, ref _registers.E) },
                { InsCBSet.RES2H,  () => ClearBit(2, ref _registers.H) },
                { InsCBSet.RES2L,  () => ClearBit(2, ref _registers.L) },
                { InsCBSet.RES2HL, () => ClearBit(2, _registers.HL) },
                { InsCBSet.RES2A,  () => ClearBit(2, ref _registers.A) },
                { InsCBSet.RES3B,  () => ClearBit(3, ref _registers.B) },
                { InsCBSet.RES3C,  () => ClearBit(3, ref _registers.C) },
                { InsCBSet.RES3D,  () => ClearBit(3, ref _registers.D) },
                { InsCBSet.RES3E,  () => ClearBit(3, ref _registers.E) },
                { InsCBSet.RES3H,  () => ClearBit(3, ref _registers.H) },
                { InsCBSet.RES3L,  () => ClearBit(3, ref _registers.L) },
                { InsCBSet.RES3HL, () => ClearBit(3, _registers.HL) },
                { InsCBSet.RES3A,  () => ClearBit(3, ref _registers.A) },
                { InsCBSet.RES4B,  () => ClearBit(4, ref _registers.B) },
                { InsCBSet.RES4C,  () => ClearBit(4, ref _registers.C) },
                { InsCBSet.RES4D,  () => ClearBit(4, ref _registers.D) },
                { InsCBSet.RES4E,  () => ClearBit(4, ref _registers.E) },
                { InsCBSet.RES4H,  () => ClearBit(4, ref _registers.H) },
                { InsCBSet.RES4L,  () => ClearBit(4, ref _registers.L) },
                { InsCBSet.RES4HL, () => ClearBit(4, _registers.HL) },
                { InsCBSet.RES4A,  () => ClearBit(4, ref _registers.A) },
                { InsCBSet.RES5B,  () => ClearBit(5, ref _registers.B) },
                { InsCBSet.RES5C,  () => ClearBit(5, ref _registers.C) },
                { InsCBSet.RES5D,  () => ClearBit(5, ref _registers.D) },
                { InsCBSet.RES5E,  () => ClearBit(5, ref _registers.E) },
                { InsCBSet.RES5H,  () => ClearBit(5, ref _registers.H) },
                { InsCBSet.RES5L,  () => ClearBit(5, ref _registers.L) },
                { InsCBSet.RES5HL, () => ClearBit(5, _registers.HL) },
                { InsCBSet.RES5A,  () => ClearBit(5, ref _registers.A) },
                { InsCBSet.RES6B,  () => ClearBit(6, ref _registers.B) },
                { InsCBSet.RES6C,  () => ClearBit(6, ref _registers.C) },
                { InsCBSet.RES6D,  () => ClearBit(6, ref _registers.D) },
                { InsCBSet.RES6E,  () => ClearBit(6, ref _registers.E) },
                { InsCBSet.RES6H,  () => ClearBit(6, ref _registers.H) },
                { InsCBSet.RES6L,  () => ClearBit(6, ref _registers.L) },
                { InsCBSet.RES6HL, () => ClearBit(6, _registers.HL) },
                { InsCBSet.RES6A,  () => ClearBit(6, ref _registers.A) },
                { InsCBSet.RES7B,  () => ClearBit(7, ref _registers.B) },
                { InsCBSet.RES7C,  () => ClearBit(7, ref _registers.C) },
                { InsCBSet.RES7D,  () => ClearBit(7, ref _registers.D) },
                { InsCBSet.RES7E,  () => ClearBit(7, ref _registers.E) },
                { InsCBSet.RES7H,  () => ClearBit(7, ref _registers.H) },
                { InsCBSet.RES7L,  () => ClearBit(7, ref _registers.L) },
                { InsCBSet.RES7HL, () => ClearBit(7, _registers.HL) },
                { InsCBSet.RES7A,  () => ClearBit(7, ref _registers.A) },
                { InsCBSet.SET0B,  () => SetBit(0, ref _registers.B) },
                { InsCBSet.SET0C,  () => SetBit(0, ref _registers.C) },
                { InsCBSet.SET0D,  () => SetBit(0, ref _registers.D) },
                { InsCBSet.SET0E,  () => SetBit(0, ref _registers.E) },
                { InsCBSet.SET0H,  () => SetBit(0, ref _registers.H) },
                { InsCBSet.SET0L,  () => SetBit(0, ref _registers.L) },
                { InsCBSet.SET0HL, () => SetBit(0, _registers.HL) },
                { InsCBSet.SET0A,  () => SetBit(0, ref _registers.A) },
                { InsCBSet.SET1B,  () => SetBit(1, ref _registers.B) },
                { InsCBSet.SET1C,  () => SetBit(1, ref _registers.C) },
                { InsCBSet.SET1D,  () => SetBit(1, ref _registers.D) },
                { InsCBSet.SET1E,  () => SetBit(1, ref _registers.E) },
                { InsCBSet.SET1H,  () => SetBit(1, ref _registers.H) },
                { InsCBSet.SET1L,  () => SetBit(1, ref _registers.L) },
                { InsCBSet.SET1HL, () => SetBit(1, _registers.HL) },
                { InsCBSet.SET1A,  () => SetBit(1, ref _registers.A) },
                { InsCBSet.SET2B,  () => SetBit(2, ref _registers.B) },
                { InsCBSet.SET2C,  () => SetBit(2, ref _registers.C) },
                { InsCBSet.SET2D,  () => SetBit(2, ref _registers.D) },
                { InsCBSet.SET2E,  () => SetBit(2, ref _registers.E) },
                { InsCBSet.SET2H,  () => SetBit(2, ref _registers.H) },
                { InsCBSet.SET2L,  () => SetBit(2, ref _registers.L) },
                { InsCBSet.SET2HL, () => SetBit(2, _registers.HL) },
                { InsCBSet.SET2A,  () => SetBit(2, ref _registers.A) },
                { InsCBSet.SET3B,  () => SetBit(3, ref _registers.B) },
                { InsCBSet.SET3C,  () => SetBit(3, ref _registers.C) },
                { InsCBSet.SET3D,  () => SetBit(3, ref _registers.D) },
                { InsCBSet.SET3E,  () => SetBit(3, ref _registers.E) },
                { InsCBSet.SET3H,  () => SetBit(3, ref _registers.H) },
                { InsCBSet.SET3L,  () => SetBit(3, ref _registers.L) },
                { InsCBSet.SET3HL, () => SetBit(3, _registers.HL) },
                { InsCBSet.SET3A,  () => SetBit(3, ref _registers.A) },
                { InsCBSet.SET4B,  () => SetBit(4, ref _registers.B) },
                { InsCBSet.SET4C,  () => SetBit(4, ref _registers.C) },
                { InsCBSet.SET4D,  () => SetBit(4, ref _registers.D) },
                { InsCBSet.SET4E,  () => SetBit(4, ref _registers.E) },
                { InsCBSet.SET4H,  () => SetBit(4, ref _registers.H) },
                { InsCBSet.SET4L,  () => SetBit(4, ref _registers.L) },
                { InsCBSet.SET4HL, () => SetBit(4, _registers.HL) },
                { InsCBSet.SET4A,  () => SetBit(4, ref _registers.A) },
                { InsCBSet.SET5B,  () => SetBit(5, ref _registers.B) },
                { InsCBSet.SET5C,  () => SetBit(5, ref _registers.C) },
                { InsCBSet.SET5D,  () => SetBit(5, ref _registers.D) },
                { InsCBSet.SET5E,  () => SetBit(5, ref _registers.E) },
                { InsCBSet.SET5H,  () => SetBit(5, ref _registers.H) },
                { InsCBSet.SET5L,  () => SetBit(5, ref _registers.L) },
                { InsCBSet.SET5HL, () => SetBit(5, _registers.HL) },
                { InsCBSet.SET5A,  () => SetBit(5, ref _registers.A) },
                { InsCBSet.SET6B,  () => SetBit(6, ref _registers.B) },
                { InsCBSet.SET6C,  () => SetBit(6, ref _registers.C) },
                { InsCBSet.SET6D,  () => SetBit(6, ref _registers.D) },
                { InsCBSet.SET6E,  () => SetBit(6, ref _registers.E) },
                { InsCBSet.SET6H,  () => SetBit(6, ref _registers.H) },
                { InsCBSet.SET6L,  () => SetBit(6, ref _registers.L) },
                { InsCBSet.SET6HL, () => SetBit(6, _registers.HL) },
                { InsCBSet.SET6A,  () => SetBit(6, ref _registers.A) },
                { InsCBSet.SET7B,  () => SetBit(7, ref _registers.B) },
                { InsCBSet.SET7C,  () => SetBit(7, ref _registers.C) },
                { InsCBSet.SET7D,  () => SetBit(7, ref _registers.D) },
                { InsCBSet.SET7E,  () => SetBit(7, ref _registers.E) },
                { InsCBSet.SET7H,  () => SetBit(7, ref _registers.H) },
                { InsCBSet.SET7L,  () => SetBit(7, ref _registers.L) },
                { InsCBSet.SET7HL, () => SetBit(7, _registers.HL) },
                { InsCBSet.SET7A,  () => SetBit(7, ref _registers.A) }
            };
        }
    }
}